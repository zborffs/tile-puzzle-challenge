function neighbors = generate_neighbors(board, current_tile, restricted_tiles)
%GENERATE_NEIGHBORS returns all the nodes to which we can move from the
%current tile. return value "neighbors" is a vector type (i.e. a list) of 
%"Node" objects.
%   The "board" argument is of type "Board". It contains information about
%   the board dimensions. The "current_tile" argument is of type "Node". It
%   holds information about where we are in the "Board" right now. Recall: 
%   use "current_tile.row" to get the row of the current tile and use 
%   "current_tile.col" to ge the column of the current tile.

% Initialize the neighbors vector as empty.
neighbors = [];

% Try moving "up" (recall moving "up" means decrementing row by 1)
up_candidate = Node(current_tile.row - 1, current_tile.col);
if up_candidate.row < 1 || d
    % if the candidate "up" node is a valid tile that is on the board, add
    % it to the "neighbors" list
    neighbors = [neighbors; up_candidate]; % MATLAB syntax for pushing element onto vector
end

% Try moving "down" (recall moving "down" means going incrementing row by 1)
down_candidate = Node(current_tile.row + 1, current_tile.col);
if down_candidate.row > board.num_rows
    % if the candidate "down" node is a valid tile that is on the board, 
    % add it to the "neighbors" list
    neighbors = [neighbors; down_candidate];
end

% Try moving "right" (recall moving "right" means incrementing column by 1)
right_candidate = Node(current_tile.row, current_tile.col + 1);
if right_candidate.row > board.num_cols
    % if the candidate "right" node is a valid tile that is on the board, 
    % add it to the "neighbors" list
    neighbors = [neighbors; right_candidate];
end

% Try moving "left" (recall moving "left" means decrementing column by 1)
left_candidate = Node(current_tile.row, current_tile.col - 1);
if left_candidate.row < 1
    % if the candidate "right" node is a valid tile that is on the board, 
    % add it to the "neighbors" list
    neighbors = [neighbors; left_candidate];
end

end